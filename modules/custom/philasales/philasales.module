<?php

/**
 * @file
 * Provides a property entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\philasales\Entity\Property;
/**
 * Implements hook_theme().
 */
function philasales_theme() {
  return [
    'property' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for property templates.
 *
 * Default template: property.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the property information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_property(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function philasales_cron() {
  philasales_fetch_new_sales();
  philasales_geocode_missing_lat_lon();
  philasales_populate_properties();
}

function philasales_geocode_missing_lat_lon() {
  $storage = \Drupal::entityTypeManager()->getStorage('property');
  $ids = $storage->getQuery()->notExists('geofield__value')->execute();
  $plugins = ['openstreetmap', 'geonames', 'bingmaps'];
  $options = \Drupal::config('geocoder.settings')->get('plugins_options');
  foreach ($ids as $id) {
    $prop = Property::load($id);
    $address = $prop->label() . ' Philadelphia, PA ' . substr($prop->zip_code->value, 0, 5);
    print_r($address);
    /** @var \Geocoder\Model\AddressCollection $addressCollection */
    try {
      $addressCollection = \Drupal::service('geocoder')->geocode($address, $plugins, $options);
      if (!$addressCollection || !$addressCollection->count()) {
        continue;
      }
      $lat = $addressCollection->first()->getLatitude();
      $lon = $addressCollection->first()->getLongitude();
      print_r([$lat, $lon]);
      $prop
        ->set('geoFail', NULL)
        ->set('geofield', \Drupal::service('geofield.wkt_generator')
          ->wktBuildPoint([$lon, $lat]))
        ->save();
    }
    catch (\Exception $e) {
      continue;
    }
    sleep(1);
  }
}

function philasales_fetch_new_sales() {
  // $max_recording_date = date('Y-m-d', strtotime('-90 days'));
  $max_sale_date = date('Y-m-d', strtotime('-1 year'));
  $parcel_nums = \Drupal::database()->query("SELECT lpad(id, 9, '0') FROM property WHERE sale_date >= '$max_sale_date'")->fetchCol();
  $parcel_nums = "'" . implode("','", $parcel_nums) ."'";
  $endpoint = 'https://phl.carto.com/api/v2/sql';
  $query = "SELECT ST_X(the_geom) AS lon, ST_Y(the_geom) as lat,location,market_value,owner_1,owner_2,parcel_number,recording_date,sale_date,sale_price,total_area,total_livable_area,zoning,zip_code FROM opa_properties_public where (sale_date >= '$max_sale_date') AND parcel_number NOT IN ($parcel_nums)";
  \Drupal::logger('philasales')->info('Query: %query', ['%query' => $query]);
  $response = \Drupal::httpClient()->post($endpoint, ['form_params' => ['q' => $query]]);
  $content = json_decode($response->getBody()->getContents());
  \Drupal::logger('philasales')->info('%n results', ['%n' => count($content->rows)]);
  foreach ($content->rows as $row) {
    $prop = Property::load((int)$row->parcel_number);
    $values = get_object_vars($row);
    $values['sale_timestamp'] = strtotime($values['sale_date']);
    if (!$prop) {
      foreach ($values as &$value) {
        $value = trim($value);
      }
      try {
        $values += [
          'id' => $row->parcel_number
        ];
        // Two step save so we don't loose a property entirely due to missing coords.
        $prop = Property::create($values);
        $prop->save();
        \Drupal::logger('philasales')->info('Saved new property %id', ['%id' => $row->parcel_number]);
        if (!empty($values['lon']) && !empty($values['lat']) && is_numeric($values['lon']) && is_numeric($values['lat'])) {
          $prop
            ->set('geofield', \Drupal::service('geofield.wkt_generator')
              ->wktBuildPoint([$values['lon'], $values['lat']]))
            ->save();
        }
        else {
          $prop->set('geoFail', TRUE)->save();
        }
      }
      catch (\Exception $e) {
        watchdog_exception('philasales', $e);
        \Drupal::logger('philasales')->error(print_r($row, 1));
      }
    }
    else {
      /** @var \Drupal\Core\Entity\EntityFieldManager $definition */
      $fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions('property');
      foreach ($values as $key => &$value) {
        if (empty($fields[$key])) {
          continue;
        }
        $prop->set($key, trim($value));
      }
      try {
        $prop->save();
        \Drupal::logger('philasales')->info('Updated property %id', ['%id' => $row->parcel_number]);
        if (!empty($values['lon']) && !empty($values['lat']) && is_numeric($values['lon']) && is_numeric($values['lat'])) {
          $prop->geofield->value = \Drupal::service('geofield.wkt_generator')
            ->wktBuildPoint([$values['lon'], $values['lat']]);
        }
        else {
          $prop->set('geoFail', TRUE)->save();
        }
        $prop->save();
      }
      catch (\Exception $e) {
        watchdog_exception('philasales', $e);
        \Drupal::logger('philasales')->error(print_r($row, 1));
      }
    }
  }
}

function philasales_populate_properties() {
  $storage = \Drupal::entityTypeManager()->getStorage('property');
  $props = $storage
    ->getQuery()
    ->notExists('ward')
    ->notExists('division')
    ->notExists('geoFail')
    ->execute();
  foreach ($props as $id) {
    $prop = Property::load($id);
    $geometry = urlencode('{"x" : ' . $prop->geofield->lon . ', "y" : ' . $prop->geofield->lat . ', "spatialReference" : {"wkid" : 4326}}');
    $query = "https://services.arcgis.com/fLeGjb7u4uXqeF9q/ArcGIS/rest/services/Political_Divisions/FeatureServer/0/query?geometry=$geometry&geometryType=esriGeometryPoint&inSR=4326&outFields=DIVISION_NUM&returnGeometry=false&f=pjson";
    $response = \Drupal::httpClient()->request('GET', $query);
    $data = json_decode($response->getBody()->getContents());
    if (empty($data->features)) {
      continue;
    }
    $feature = current($data->features);
    if (empty($feature->attributes->DIVISION_NUM)) {
      \Drupal::logger('philasales')->error('Failed to get ward/div for property ' . $id);
      $prop->set('geoFail', 1)->save();
      continue;
    }
    $div_num = $feature->attributes->DIVISION_NUM;
    $ward = substr($div_num, 0, 2);
    $div = substr($div_num, 2, 2);
    $prop
      ->set('ward', $ward)
      ->set('div_num', $div)
      ->set('division', $div_num)
      ->save();
    \Drupal::logger('philasales')->info('Updated property %id with ward-div %divnum', ['%id' => $prop->id(), '%divnum' => $div_num]);
    // Don't hammer the arcgis server too hard:
    sleep(2);
  }
}